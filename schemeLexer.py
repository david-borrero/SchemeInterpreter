# Generated from scheme.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,53,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,1,0,1,0,1,1,1,1,1,2,1,2,1,3,3,3,23,8,3,1,3,4,3,26,8,3,11,3,
        12,3,27,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,38,8,4,1,5,1,5,5,5,42,
        8,5,10,5,12,5,45,9,5,1,6,4,6,48,8,6,11,6,12,6,49,1,6,1,6,0,0,7,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,1,0,6,2,0,43,43,45,45,1,0,48,57,5,0,
        42,43,45,45,47,47,60,60,62,62,2,0,65,90,97,122,3,0,48,57,65,90,97,
        122,3,0,9,10,13,13,32,32,60,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,15,1,0,0,0,3,
        17,1,0,0,0,5,19,1,0,0,0,7,22,1,0,0,0,9,37,1,0,0,0,11,39,1,0,0,0,
        13,47,1,0,0,0,15,16,5,39,0,0,16,2,1,0,0,0,17,18,5,40,0,0,18,4,1,
        0,0,0,19,20,5,41,0,0,20,6,1,0,0,0,21,23,7,0,0,0,22,21,1,0,0,0,22,
        23,1,0,0,0,23,25,1,0,0,0,24,26,7,1,0,0,25,24,1,0,0,0,26,27,1,0,0,
        0,27,25,1,0,0,0,27,28,1,0,0,0,28,8,1,0,0,0,29,38,7,2,0,0,30,31,5,
        62,0,0,31,38,5,61,0,0,32,33,5,60,0,0,33,38,5,61,0,0,34,38,5,61,0,
        0,35,36,5,60,0,0,36,38,5,62,0,0,37,29,1,0,0,0,37,30,1,0,0,0,37,32,
        1,0,0,0,37,34,1,0,0,0,37,35,1,0,0,0,38,10,1,0,0,0,39,43,7,3,0,0,
        40,42,7,4,0,0,41,40,1,0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,43,44,1,
        0,0,0,44,12,1,0,0,0,45,43,1,0,0,0,46,48,7,5,0,0,47,46,1,0,0,0,48,
        49,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,51,1,0,0,0,51,52,6,6,0,
        0,52,14,1,0,0,0,6,0,22,27,37,43,49,1,6,0,0
    ]

class schemeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    NUM = 4
    OP = 5
    ID = 6
    WS = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'''", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "OP", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "NUM", "OP", "ID", "WS" ]

    grammarFileName = "scheme.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


