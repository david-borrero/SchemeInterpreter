# Generated from scheme.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,8,66,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,1,0,1,0,1,1,1,1,1,2,1,2,1,3,3,3,25,8,3,1,3,4,3,28,
        8,3,11,3,12,3,29,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,40,8,4,1,5,
        1,5,5,5,44,8,5,10,5,12,5,47,9,5,1,6,1,6,1,6,1,6,5,6,53,8,6,10,6,
        12,6,56,9,6,1,6,1,6,1,7,4,7,61,8,7,11,7,12,7,62,1,7,1,7,0,0,8,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,1,0,7,2,0,43,43,45,45,1,0,48,57,
        5,0,42,43,45,45,47,47,60,60,62,62,2,0,65,90,97,122,3,0,48,57,65,
        90,97,122,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,75,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,1,17,1,0,0,0,3,19,1,0,0,0,5,21,1,0,0,0,
        7,24,1,0,0,0,9,39,1,0,0,0,11,41,1,0,0,0,13,48,1,0,0,0,15,60,1,0,
        0,0,17,18,5,39,0,0,18,2,1,0,0,0,19,20,5,40,0,0,20,4,1,0,0,0,21,22,
        5,41,0,0,22,6,1,0,0,0,23,25,7,0,0,0,24,23,1,0,0,0,24,25,1,0,0,0,
        25,27,1,0,0,0,26,28,7,1,0,0,27,26,1,0,0,0,28,29,1,0,0,0,29,27,1,
        0,0,0,29,30,1,0,0,0,30,8,1,0,0,0,31,40,7,2,0,0,32,33,5,62,0,0,33,
        40,5,61,0,0,34,35,5,60,0,0,35,40,5,61,0,0,36,40,5,61,0,0,37,38,5,
        60,0,0,38,40,5,62,0,0,39,31,1,0,0,0,39,32,1,0,0,0,39,34,1,0,0,0,
        39,36,1,0,0,0,39,37,1,0,0,0,40,10,1,0,0,0,41,45,7,3,0,0,42,44,7,
        4,0,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,
        12,1,0,0,0,47,45,1,0,0,0,48,54,5,34,0,0,49,53,8,5,0,0,50,51,5,34,
        0,0,51,53,5,34,0,0,52,49,1,0,0,0,52,50,1,0,0,0,53,56,1,0,0,0,54,
        52,1,0,0,0,54,55,1,0,0,0,55,57,1,0,0,0,56,54,1,0,0,0,57,58,5,34,
        0,0,58,14,1,0,0,0,59,61,7,6,0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,
        1,0,0,0,62,63,1,0,0,0,63,64,1,0,0,0,64,65,6,7,0,0,65,16,1,0,0,0,
        8,0,24,29,39,45,52,54,62,1,6,0,0
    ]

class schemeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    NUM = 4
    OP = 5
    ID = 6
    STRING = 7
    WS = 8

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'''", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "OP", "ID", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "NUM", "OP", "ID", "STRING", "WS" ]

    grammarFileName = "scheme.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


